#!/usr/bin/env python3

# Librerias necesarias
import rospy 
import numpy as np 
from std_msgs.msg import Float64, Float64MultiArray, Bool
from roslib import packages
from functions import *
import rbdl 
from roboclaw_3 import Roboclaw

# Configuracion del driver de los motores
rc0= Roboclaw("/dev/ttyACM0", 38400) 
rc0.Open()                           
rc1= Roboclaw("/dev/ttyACM1", 38400)
rc1.Open()
rc2= Roboclaw("/dev/ttyACM2", 38400)
rc2.Open()

rc= [rc0, rc1, rc2]
address = 0x80

# Inicializando encoders
rc0.SetEncM1(address, 0)
rc0.SetEncM2(address, 0)
rc1.SetEncM1(address, 0)
rc1.SetEncM2(address, 0)
rc2.SetEncM1(address, 0)
rc2.SetEncM2(address, 0)

# Bandera de posicionamiento inicial del UR5
global binit
binit = 0

def callback1(data):
	global binit
	binit = data.data

# Bandera de boton  
global bboton
bboton = False

def callback(data):
   global bboton
   bboton = data.data
 

epsilon = 1e-2

if __name__ == "__main__":

   rospy.init_node("Implementacion_real")
   pub_posur5 = rospy.Publisher('pos_ur5', Float64MultiArray, queue_size=10)  # Publica posiciones angulares para el UR5
   rospy.Subscriber('pos_inicial', Float64, callback1)  # Recibe bandera de posición inicial del UR5
   rospy.Subscriber('bandera_boton', Bool, callback)    # Recibe bandera de boton

   # Variables
   q_ur5_data = Float64MultiArray()
   q_free = np.zeros(6)
   q_mdo = np.zeros(6)

   # Configuración inicial del UR5 
   q_ur5 = [-pi/2, -pi/2, pi/2, -pi/2, -pi/2, 0.0]  
   p_ur5 = fkine_ur5(q_ur5)

   # Archivos de datos
   fpdm = open("/tmp/pdm.dat", "w")
   fpur5 = open("/tmp/pur5.dat", "w")
   
   # Inicialización de varaibles 
   q = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
   dq = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
   qdes = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
   xdm = cdir(q)

   # Modelo del dispositivo maestro
   modelo = rbdl.loadModel('../urdf/prueba_gazebo.urdf')
   ndof = modelo.q_size

   freq= 500 # 500
   dt = 1.0/freq
   rate = rospy.Rate(freq)

   # Ganancias de los controladores
   valores = 40*np.array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])  # 50 
   Kp = np.diag(valores)

   Kd = 158.114*np.sqrt(Kp) 

   u = np.zeros(ndof)            # Esfuerzo de control 
   M = np.zeros([ndof, ndof])    # Matriz de inercia 
   g = np.zeros(ndof)            # Gravedad
   b = np.zeros(ndof)            # Efectos no lineales   

   t=0.0

   # Inicializamos setpoint para motores
   qi = q
   q_s = q
   dq_s = np.zeros(ndof)
   ddq_s = np.zeros(ndof)

   while not rospy.is_shutdown():
      
    if (binit==1) and (bboton==True):            # Posicionado y boton presionado
    	# Libre movimiento
        rc0.DutyM1(address, 0)
        rc0.DutyM2(address, 0)
        rc1.DutyM1(address, 0)
        rc1.DutyM2(address, 0)
        rc2.DutyM1(address, 0)
        rc2.DutyM2(address, 0)

        q_free  = leer_encoder(rc, address)
        q_free= [int(q_free[0]), int(q_free[1]), int(q_free[2]), int(q_free[3]), int(q_free[4]), int(q_free[5]),0]
        print(q_free)
         
        # Cinematica directa del dispositivo
        xdmact= cdir(q_free)
         
        # Generación de trayectoria al UR5
        q_ur5req= trayectoria(xdmact, xdm, p_ur5, q_ur5)

        # Actualización de posiciones
        xdm= xdmact
        q_ur5=q_ur5req

        # Cinematica del UR5
        p_ur5 = fkine_ur5(q_ur5)
         
        # Publicabamos los nuevos valores articulares para el ur5    
        q_ur5_data.data = q_ur5
        pub_posur5.publish(q_ur5_data)

        q_mdo= leer_encoder(rc, address)
        
        # Se guarda la data de trayectoria                  
        fpdm.write(str(xdmact[0,3])+' '+str(xdmact[1,3])+' '+str(xdmact[2,3])+'\n')
        fpur5.write(str(p_ur5[0,3])+' '+str(p_ur5[1,3])+' '+str(p_ur5[2,3])+'\n')        

        rate.sleep()

    elif(binit==1) and (bboton == False):   # Bandera de posicionado y boton sin presionar

        qdes= [int(q_mdo[0]) + 1, int(q_mdo[1]) + 1, int(q_mdo[2]) + 1, int(q_mdo[3]) + 1, int(q_mdo[4]) + 1, int(q_mdo[5]) + 1,0]
        q = leer_encoder(rc,address)   
             
        dq =  (q-qi)/dt

        qi = q  # Actualiza valor

        e = qdes-q   # se obtiene el error 

        print("Error: {}".format(np.round(np.linalg.norm(e),4)))

        if (np.linalg.norm(e)<epsilon):
            bandera_pd = True
            print("Posicion deseada alcanzada")

        rbdl.InverseDynamics(modelo, q, zeros, zeros, g) # Vector de gravedad

        # Ley de control 
        u = g + Kp.dot(e) - Kp.dot(dq)   # actualizar en el espacio cartesiano

        
        rbdl.CompositeRigidBodyAlgorithm(modelo, q, M)  # Matriz de inercia
        rbdl.NonlinearEffects(modelo, q, dq, b)         # Vector de efectos no lineales

    	# Calculando las nuevas posiciones y velocidades angulares para el dipositivo maestro
        ddq_s = np.linalg.inv(M).dot(u-b)
        dq_s += (dt*ddq_s) 
        q_s += dt*dq_s 

        # Se entrega la velocidad y posición 
        input_control(q_s, rc)

        t = t+dt 

        rate.sleep()