#!/usr/bin/env python3

# Librerias necesarias
import time
import roslib; #roslib.load_manifest('ur_driver')
import rospy
import actionlib
from control_msgs.msg import *
from trajectory_msgs.msg import *
from std_msgs.msg import Float64, Float64MultiArray
import numpy as np
from ur5 import *

# Variables iniciales
binit=0 
global q_ur5
q_ur5 = [-pi/2, -pi/2, pi/2, -pi/2, -pi/2, 0.0]       # Posiciones angulares inicial del UR5 

def callback(data):
    global q_ur5
    q_ur5= data.data


if __name__ == '__main__':
    
    # Inicializan el nodo
    rospy.init_node("test1", disable_signals=True)
    rospy.Subscriber('pos_ur5', Float64MultiArray, callback)                     
    pos_init= rospy.Publisher('pos_inicial', Float64, queue_size=10)            

    # implementación
    robot_client = actionlib.SimpleActionClient('/scaled_pos_joint_traj_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
    
    # simulación 
    # robot_client = actionlib.SimpleActionClient('/pos_joint_traj_controller/follow_joint_trajectory', FollowJointTrajectoryAction)

    print("Waiting for server...")
    robot_client.wait_for_server()
    print("Connected to server")

    joint_names = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']
    
    Q0 = [-90.0, -90, 90, -90, -90, 0.0]      # Posicion inicial UR5
    Q0 = np.deg2rad(Q0)
    
    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = joint_names

    # Send initial position
    g.trajectory.points = [ JointTrajectoryPoint(positions=Q0, velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
    robot_client.send_goal(g)
    robot_client.wait_for_result()
    rospy.sleep(1)
    
    # Bandera de posición inicial 
    binit=1

    freq= 10
    dt=1.0/10

    rate = rospy.Rate(freq)
    while not rospy.is_shutdown():

        robot_client.cancel_goal()

        # Publica bandera
        pos_init.publish(binit)

        T= fkine_ur5(q_ur5)
        print(q_ur5)
        
        #  Actualiza la posicion del UR5 en base a la trayectoria generada por el dispositivo maestro
        g.trajectory.points = [ JointTrajectoryPoint(positions=q_ur5, velocities=[0]*6, time_from_start=rospy.Duration(dt))]
        robot_client.send_goal(g)
        robot_client.wait_for_result()

        rate.sleep()

    robot_client.cancel_goal()