#!/usr/bin/env python3

# Librerias necesarias
import rospy
import numpy as np
from std_msgs.msg import Float64, Float64MultiArray, Bool
from roslib import packages
from functions import *
import rbdl 

# Se definen variables iniciales
bandera_pd= False
tmax = 180
epsilon =1e-3
sm= 0          # Cerrar trayectoria simulada

# Bandera de posicion inicial UR5
global binit  # bandera de posicion inicial del robot UR5
binit= 0  

def callback(data):
    global binit
    binit= data.data

# Bandera boton
global bboton  # bandera de posicion inicial del robot UR5
bboton= True    # Se inicia con true solo en simulación

def callback1(data):
    global bboton
    bboton= data.data

if __name__ == "__main__":

    rospy.init_node("Simulacion_trayectoria")  
    pub_posur5 = rospy.Publisher('pos_ur5', Float64MultiArray, queue_size=10)
    rospy.Subscriber('pos_inicial', Float64, callback)
    rospy.Subscriber('bandera_boton', Bool, callback1)

    q_ur5_data=Float64MultiArray()  

    fqact = open("/tmp/qactual.dat", "w")
    fqdes = open("/tmp/qdeseado.dat", "w")
    fxact = open("/tmp/xactual.dat", "w")
    fxdes = open("/tmp/xdeseado.dat", "w")        
    fpdh = open("/tmp/pdh.dat", "w")
    fpur5 = open("/tmp/pur5.dat", "w")

    # Configuración Inicial del UR5
    q_ur5=[-pi/2, -pi/2, pi/2, -pi/2, -pi/2, 0.0]  #[-pi/2, -pi/2, pi/2, -pi/2, -pi/2, 0.0]
    p_ur5= fkine_ur5(q_ur5)

    # Configuración Inicial del Dispositivo
    q = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    dq = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    qdes = np.array([0.0, -45.0, 0.0, 30.0, 45.0, 45.0, 0.0])

    xdes = cdir(qdes)[0:3, 3]
    xdh = cdir(q)

    # Se carga el modelo urdf del dispositivo
    modelo = rbdl.loadModel('../urdf/prueba_gazebo.urdf')
    ndof = modelo.q_size

    freq= 500
    dt = 1.0/freq
    rate = rospy.Rate(freq)

    # Simulador dinámico del robot
    robot= Robot(q, dq, ndof, dt)

    # Ganancias de los controladores
    valores = 40*np.array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])  # 50 10  // 5 2
    Kp = np.diag(valores)

    Kd = 25*np.sqrt(Kp) #2

    u = np.zeros(ndof)         # Esfuerzo de control 
    M = np.zeros([ndof, ndof]) # Matriz de inercia 
    g = np.zeros(ndof)         # Gravedad
    zeros = np.zeros(ndof)     
    c = np.zeros(ndof)         # Coriolis

    t= 0.0
    #e= qdes- q 

    while not rospy.is_shutdown():

        if (bboton==True) and (binit==1) and (bandera_pd == False) and (round(t,4) <= round(tmax, 4)):

            x = cdir(q)[0:3,3]
            
            # Guardan data
            fxact.write(str(t)+' '+str(x[0])+' '+str(x[1])+' '+str(x[2])+'\n')
            fxdes.write(str(t)+' '+str(xdes[0])+' '+str(xdes[1])+' '+str(xdes[2])+'\n')
            fqact.write(str(t)+' '+str(q[0])+' '+str(q[1])+' '+ str(q[2])+' '+ str(q[3])+' '+str(q[4])+' '+str(q[5])+ ' '+str(q[6])+ '\n ')
            fqdes.write(str(t)+' '+str(qdes[0])+' '+str(qdes[1])+' '+ str(qdes[2])+' '+ str(qdes[3])+' '+str(qdes[4])+' '+str(qdes[5])+' '+str(qdes[6])+'\n ')

            # Error
            e= qdes- q 
            print("Error: {}".format(np.round(np.linalg.norm(e),4)))

            if (np.linalg.norm(e)<epsilon) or (round(t,4) == round(tmax,4)):
                sm=sm+1
                if (sm==1):
                    qdes = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
                elif(sm==2):
                    bandera_pd = True
                    print("Posicion deseada alcanzada")
            
            
            rbdl.InverseDynamics(modelo, q, zeros, zeros, g)  # Vector de gravedad 

            u = g + Kp.dot(qdes-q) - Kp.dot(dq)   # Ley de control

            robot.send_command(u)       # Se entrega el esfuerzo de control al simulador
            
            q = robot.read_joint_positions()   #sexagesimales
            dq = robot.read_joint_velocities()
            
            q2= [q[0], -q[1], q[2], q[3], q[4], q[5],q[6]]
            
            # Generación de trayectoria
            xdhact= cdir(q2)
            
            # Se genera la trayectoria para el UR5
            q_ur5req= trayectoria(xdhact, xdh, p_ur5, q_ur5)

            # Actualizando valores
            xdh= xdhact
            q_ur5=q_ur5req 

            p_ur5 = fkine_ur5(q_ur5)
            
            # Se entrega posiciones angulares al UR5
            q_ur5_data.data= q_ur5
            pub_posur5.publish(q_ur5_data)

            fpdh.write(str(xdhact[0,3])+' '+str(xdhact[1,3])+' '+str(xdhact[2,3])+'\n')
            fpur5.write(str(p_ur5[0,3])+' '+str(p_ur5[1,3])+' '+str(p_ur5[2,3])+'\n')

            q = q.dot(pi/180)

            t = t+dt 

            rate.sleep()
        
        elif(bboton==False):
            q = robot.read_joint_positions() 
 
            rospy.loginfo(binit)
            
            rate.sleep()


